version: '3.8'

services:
  # API Gateway (NGINX)
  api-gateway:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - auth-service
      - model-service
      - data-service
      - ui-service
    networks:
      - foretel-network

  # Authentication Service
  auth-service:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://auth_user:auth_pass@postgres-auth:5432/auth_db
      - JWT_SECRET=${JWT_SECRET}
      - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
      - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
    depends_on:
      - postgres-auth
      - redis
    networks:
      - foretel-network

  # Model Service
  model-service:
    build:
      context: ./services/model
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://model_user:model_pass@postgres-models:5432/models_db
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ./models:/app/models
      - ./data:/app/data
    depends_on:
      - postgres-models
      - redis
      - kafka
      - mlflow
    networks:
      - foretel-network

  # Data Service
  data-service:
    build:
      context: ./services/data
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://data_user:data_pass@postgres-data:5432/data_db
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - AIRFLOW_WEBSERVER_HOST=airflow-webserver
    depends_on:
      - postgres-data
      - redis
      - kafka
      - airflow-webserver
    networks:
      - foretel-network

  # UI Service (Streamlit)
  ui-service:
    build:
      context: ./services/ui
      dockerfile: Dockerfile
    environment:
      - API_BASE_URL=http://api-gateway
      - AUTH_SERVICE_URL=http://auth-service:8000
      - MODEL_SERVICE_URL=http://model-service:8001
      - DATA_SERVICE_URL=http://data-service:8002
    ports:
      - "8501:8501"
    networks:
      - foretel-network

  # PostgreSQL - Authentication
  postgres-auth:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=auth_db
      - POSTGRES_USER=auth_user
      - POSTGRES_PASSWORD=auth_pass
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
      - ./sql/auth_init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - foretel-network

  # PostgreSQL - Models
  postgres-models:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=models_db
      - POSTGRES_USER=model_user
      - POSTGRES_PASSWORD=model_pass
    volumes:
      - postgres_models_data:/var/lib/postgresql/data
      - ./sql/models_init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - foretel-network

  # PostgreSQL - Data
  postgres-data:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=data_db
      - POSTGRES_USER=data_user
      - POSTGRES_PASSWORD=data_pass
    volumes:
      - postgres_data_data:/var/lib/postgresql/data
      - ./sql/data_init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - foretel-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - foretel-network

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - foretel-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - foretel-network

  # MLflow Tracking Server
  mlflow:
    image: python:3.11-slim
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://mlflow_user:mlflow_pass@postgres-mlflow:5432/mlflow_db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=s3://mlflow-artifacts
    command: >
      sh -c "pip install mlflow psycopg2-binary boto3 &&
             mlflow server --host 0.0.0.0 --port 5000 
             --backend-store-uri postgresql://mlflow_user:mlflow_pass@postgres-mlflow:5432/mlflow_db
             --default-artifact-root s3://mlflow-artifacts"
    depends_on:
      - postgres-mlflow
    networks:
      - foretel-network

  # PostgreSQL - MLflow
  postgres-mlflow:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=mlflow_db
      - POSTGRES_USER=mlflow_user
      - POSTGRES_PASSWORD=mlflow_pass
    volumes:
      - postgres_mlflow_data:/var/lib/postgresql/data
    networks:
      - foretel-network

  # Apache Airflow
  airflow-webserver:
    image: apache/airflow:2.7.0
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://airflow_user:airflow_pass@postgres-airflow:5432/airflow_db
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
      - AIRFLOW__WEBSERVER__SECRET_KEY=${AIRFLOW_SECRET_KEY}
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    depends_on:
      - postgres-airflow
    command: webserver
    networks:
      - foretel-network

  airflow-scheduler:
    image: apache/airflow:2.7.0
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql://airflow_user:airflow_pass@postgres-airflow:5432/airflow_db
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    depends_on:
      - postgres-airflow
    command: scheduler
    networks:
      - foretel-network

  # PostgreSQL - Airflow
  postgres-airflow:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=airflow_db
      - POSTGRES_USER=airflow_user
      - POSTGRES_PASSWORD=airflow_pass
    volumes:
      - postgres_airflow_data:/var/lib/postgresql/data
    networks:
      - foretel-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - foretel-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - foretel-network

  # Log Management - ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - foretel-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.0
    volumes:
      - ./elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch
    networks:
      - foretel-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - foretel-network

networks:
  foretel-network:
    driver: bridge

volumes:
  postgres_auth_data:
  postgres_models_data:
  postgres_data_data:
  postgres_mlflow_data:
  postgres_airflow_data:
  redis_data:
  kafka_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
